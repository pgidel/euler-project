package euler.problem.p01;

import java.math.BigInteger;

import euler.problem.AbstractEuler;
import euler.util.EulerUtils;

public class Euler012 extends AbstractEuler {

	private long max;

	public Euler012(long max) {
		this.max = max;
	}

	/**
	 * The sequence of triangle numbers is generated by adding the natural
	 * numbers. So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7
	 * = 28. The first ten terms would be:
	 * 
	 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	 * 
	 * Let us list the factors of the first seven triangle numbers:
	 * 
	 * 1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28:
	 * 1,2,4,7,14,28
	 * 
	 * We can see that 28 is the first triangle number to have over five
	 * divisors.
	 * 
	 * What is the value of the first triangle number to have over max divisors?
	 */
	@Override
	public void compute() {
		long i = 1;
		long n = 0;
		do {
			n += i++;
		} while (EulerUtils.getNbDivisors(n) <= max);
		result = BigInteger.valueOf(n);
	}

	/**
	 * 
	 * @param args
	 */
	public static void main(String... args) {
		compute(new Euler012(500));
	}

}
