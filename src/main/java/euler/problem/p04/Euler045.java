package euler.problem.p04;

import java.math.BigInteger;

import euler.problem.AbstractEuler;
import euler.util.EulerUtils;

public class Euler045 extends AbstractEuler {

	private long n;

	public Euler045(long n) {
		this.n = n;
	}

	/**
	 * Triangle, pentagonal, and hexagonal numbers are generated by the
	 * following formulae: Triangle T_(n)=n(n+1)/2 1, 3, 6, 10, 15, ...
	 * Pentagonal P_(n)=n(3n-1)/2 1, 5, 12, 22, 35, ... Hexagonal H_(n)=n(2n-1)
	 * 1, 6, 15, 28, 45, ...
	 * 
	 * It can be verified that T_(285) = P_(165) = H_(143) = 40755.
	 * 
	 * Find the next triangle number that is also pentagonal and hexagonal.
	 */
	@Override
	public void compute() {
		boolean found = false;
		long nH = 0, nP = 0, nT = 0;
		long hexagonal = EulerUtils.getHexagonal(nH);
		while (!found) {
			if (hexagonal > n) {
				long pentagonal;
				while (!found
						&& (pentagonal = EulerUtils.getPentagonal(nP)) <= hexagonal) {
					if (pentagonal == hexagonal) {
						long triangle;
						while (!found
								&& (triangle = EulerUtils.getTriangle(nT)) <= hexagonal) {
							if (triangle == hexagonal) {
								found = true;
							}
							nT++;
						}
					}
					nP++;
				}
			}
			nH++;
		}
		result = BigInteger.valueOf(hexagonal);
	}

	/**
	 * 
	 * @param args
	 */
	public static void main(String... args) {
		compute(new Euler045(40755));
	}

}
